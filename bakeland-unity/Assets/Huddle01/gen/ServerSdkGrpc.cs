// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: serverSdk.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace ClientToSushi {
  public static partial class ServerSdkService
  {
    static readonly string __ServiceName = "ClientToSushi.ServerSdkService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.UpdatePermissionRequest> __Marshaller_ClientToSushi_UpdatePermissionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.UpdatePermissionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.UpdatePermissionResponse> __Marshaller_ClientToSushi_UpdatePermissionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.UpdatePermissionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.GetPeerDataRequest> __Marshaller_ClientToSushi_GetPeerDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.GetPeerDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.GetPeerDataResponse> __Marshaller_ClientToSushi_GetPeerDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.GetPeerDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.SendDataRequest> __Marshaller_ClientToSushi_SendDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.SendDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.SendDataResponse> __Marshaller_ClientToSushi_SendDataResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.SendDataResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.RecorderMsgRequest> __Marshaller_ClientToSushi_RecorderMsgRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.RecorderMsgRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.RecorderMsgResponse> __Marshaller_ClientToSushi_RecorderMsgResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.RecorderMsgResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.RegisterRecorderRequest> __Marshaller_ClientToSushi_RegisterRecorderRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.RegisterRecorderRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.GetSessionIdRequest> __Marshaller_ClientToSushi_GetSessionIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.GetSessionIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::ClientToSushi.GetSessionIdResponse> __Marshaller_ClientToSushi_GetSessionIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::ClientToSushi.GetSessionIdResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.UpdatePermissionRequest, global::ClientToSushi.UpdatePermissionResponse> __Method_updatePermission = new grpc::Method<global::ClientToSushi.UpdatePermissionRequest, global::ClientToSushi.UpdatePermissionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "updatePermission",
        __Marshaller_ClientToSushi_UpdatePermissionRequest,
        __Marshaller_ClientToSushi_UpdatePermissionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.GetPeerDataRequest, global::ClientToSushi.GetPeerDataResponse> __Method_getPeerData = new grpc::Method<global::ClientToSushi.GetPeerDataRequest, global::ClientToSushi.GetPeerDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getPeerData",
        __Marshaller_ClientToSushi_GetPeerDataRequest,
        __Marshaller_ClientToSushi_GetPeerDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.SendDataRequest, global::ClientToSushi.SendDataResponse> __Method_sendData = new grpc::Method<global::ClientToSushi.SendDataRequest, global::ClientToSushi.SendDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendData",
        __Marshaller_ClientToSushi_SendDataRequest,
        __Marshaller_ClientToSushi_SendDataResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.RecorderMsgRequest, global::ClientToSushi.RecorderMsgResponse> __Method_sendRecorderMsg = new grpc::Method<global::ClientToSushi.RecorderMsgRequest, global::ClientToSushi.RecorderMsgResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "sendRecorderMsg",
        __Marshaller_ClientToSushi_RecorderMsgRequest,
        __Marshaller_ClientToSushi_RecorderMsgResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.RegisterRecorderRequest, global::ClientToSushi.RecorderMsgResponse> __Method_registerRecorder = new grpc::Method<global::ClientToSushi.RegisterRecorderRequest, global::ClientToSushi.RecorderMsgResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "registerRecorder",
        __Marshaller_ClientToSushi_RegisterRecorderRequest,
        __Marshaller_ClientToSushi_RecorderMsgResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::ClientToSushi.GetSessionIdRequest, global::ClientToSushi.GetSessionIdResponse> __Method_getSessionId = new grpc::Method<global::ClientToSushi.GetSessionIdRequest, global::ClientToSushi.GetSessionIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "getSessionId",
        __Marshaller_ClientToSushi_GetSessionIdRequest,
        __Marshaller_ClientToSushi_GetSessionIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::ClientToSushi.ServerSdkReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServerSdkService</summary>
    [grpc::BindServiceMethod(typeof(ServerSdkService), "BindService")]
    public abstract partial class ServerSdkServiceBase
    {
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.UpdatePermissionResponse> updatePermission(global::ClientToSushi.UpdatePermissionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.GetPeerDataResponse> getPeerData(global::ClientToSushi.GetPeerDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.SendDataResponse> sendData(global::ClientToSushi.SendDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.RecorderMsgResponse> sendRecorderMsg(global::ClientToSushi.RecorderMsgRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.RecorderMsgResponse> registerRecorder(global::ClientToSushi.RegisterRecorderRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::ClientToSushi.GetSessionIdResponse> getSessionId(global::ClientToSushi.GetSessionIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServerSdkService</summary>
    public partial class ServerSdkServiceClient : grpc::ClientBase<ServerSdkServiceClient>
    {
      /// <summary>Creates a new client for ServerSdkService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServerSdkServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServerSdkService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ServerSdkServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServerSdkServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ServerSdkServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.UpdatePermissionResponse updatePermission(global::ClientToSushi.UpdatePermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updatePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.UpdatePermissionResponse updatePermission(global::ClientToSushi.UpdatePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_updatePermission, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.UpdatePermissionResponse> updatePermissionAsync(global::ClientToSushi.UpdatePermissionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return updatePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.UpdatePermissionResponse> updatePermissionAsync(global::ClientToSushi.UpdatePermissionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_updatePermission, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.GetPeerDataResponse getPeerData(global::ClientToSushi.GetPeerDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPeerData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.GetPeerDataResponse getPeerData(global::ClientToSushi.GetPeerDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getPeerData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.GetPeerDataResponse> getPeerDataAsync(global::ClientToSushi.GetPeerDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getPeerDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.GetPeerDataResponse> getPeerDataAsync(global::ClientToSushi.GetPeerDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getPeerData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.SendDataResponse sendData(global::ClientToSushi.SendDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.SendDataResponse sendData(global::ClientToSushi.SendDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.SendDataResponse> sendDataAsync(global::ClientToSushi.SendDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.SendDataResponse> sendDataAsync(global::ClientToSushi.SendDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendData, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.RecorderMsgResponse sendRecorderMsg(global::ClientToSushi.RecorderMsgRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendRecorderMsg(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.RecorderMsgResponse sendRecorderMsg(global::ClientToSushi.RecorderMsgRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_sendRecorderMsg, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.RecorderMsgResponse> sendRecorderMsgAsync(global::ClientToSushi.RecorderMsgRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return sendRecorderMsgAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.RecorderMsgResponse> sendRecorderMsgAsync(global::ClientToSushi.RecorderMsgRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_sendRecorderMsg, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.RecorderMsgResponse registerRecorder(global::ClientToSushi.RegisterRecorderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return registerRecorder(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.RecorderMsgResponse registerRecorder(global::ClientToSushi.RegisterRecorderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_registerRecorder, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.RecorderMsgResponse> registerRecorderAsync(global::ClientToSushi.RegisterRecorderRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return registerRecorderAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.RecorderMsgResponse> registerRecorderAsync(global::ClientToSushi.RegisterRecorderRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_registerRecorder, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.GetSessionIdResponse getSessionId(global::ClientToSushi.GetSessionIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getSessionId(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::ClientToSushi.GetSessionIdResponse getSessionId(global::ClientToSushi.GetSessionIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_getSessionId, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.GetSessionIdResponse> getSessionIdAsync(global::ClientToSushi.GetSessionIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return getSessionIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::ClientToSushi.GetSessionIdResponse> getSessionIdAsync(global::ClientToSushi.GetSessionIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_getSessionId, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ServerSdkServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServerSdkServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ServerSdkServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_updatePermission, serviceImpl.updatePermission)
          .AddMethod(__Method_getPeerData, serviceImpl.getPeerData)
          .AddMethod(__Method_sendData, serviceImpl.sendData)
          .AddMethod(__Method_sendRecorderMsg, serviceImpl.sendRecorderMsg)
          .AddMethod(__Method_registerRecorder, serviceImpl.registerRecorder)
          .AddMethod(__Method_getSessionId, serviceImpl.getSessionId).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServerSdkServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_updatePermission, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.UpdatePermissionRequest, global::ClientToSushi.UpdatePermissionResponse>(serviceImpl.updatePermission));
      serviceBinder.AddMethod(__Method_getPeerData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.GetPeerDataRequest, global::ClientToSushi.GetPeerDataResponse>(serviceImpl.getPeerData));
      serviceBinder.AddMethod(__Method_sendData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.SendDataRequest, global::ClientToSushi.SendDataResponse>(serviceImpl.sendData));
      serviceBinder.AddMethod(__Method_sendRecorderMsg, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.RecorderMsgRequest, global::ClientToSushi.RecorderMsgResponse>(serviceImpl.sendRecorderMsg));
      serviceBinder.AddMethod(__Method_registerRecorder, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.RegisterRecorderRequest, global::ClientToSushi.RecorderMsgResponse>(serviceImpl.registerRecorder));
      serviceBinder.AddMethod(__Method_getSessionId, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::ClientToSushi.GetSessionIdRequest, global::ClientToSushi.GetSessionIdResponse>(serviceImpl.getSessionId));
    }

  }
}
#endregion
